# Written by Tiago Perez

# 9.1 Restaurant

class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now open")


restaurant = Restaurant("Delicious Pasta", "Italian")

print("Restaurant Name:", restaurant.restaurant_name)
print("Cuisine Type:", restaurant.cuisine_type)

restaurant.describe_restaurant()
restaurant.open_restaurant()

# 9.2 Three restaurants

restaurant1 = Restaurant("Delicious Pasta", "Italian")
restaurant2 = Restaurant("Spice And Flavor", "Indian")
restaurant3 = Restaurant("Sushi Paradise", "Japanese")

print("Restaurant 1:")
restaurant1.describe_restaurant()
print("\nRestaurant 2:")
restaurant2.describe_restaurant()
print("\nRestaurant 3:")
restaurant3.describe_restaurant()

# 9.3 Users

class User:
    def __init__(self, first_name, last_name, username, location):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.location = location

    def describe_user(self):
        print("User Information:")
        print(f"Name: {self.first_name} {self.last_name}")
        print(f"Username: {self.username}")
        print(f"Location: {self.location}")

    def greet_user(self):
        print(f"Hello, {self.first_name}! Welcome back.")


user1 = User("John", "Doe", "johndoe", "New York")
user2 = User("Jane", "Smith", "janesmith", "London")
user3 = User("Alice", "Johnson", "alicej", "Paris")

user1.describe_user()
user1.greet_user()
print()

user2.describe_user()
user2.greet_user()
print()

user3.describe_user()
user3.greet_user()

# 9.4 Number Served

class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = 0

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now open")

    def set_number_served(self, number):
        self.number_served = number

    def increment_number_served(self, increment):
        self.number_served += increment


restaurant = Restaurant("Delicious Bites", "Italian")

print("Number of customers served:", restaurant.number_served)

restaurant.number_served = 100
print("Number of customers served:", restaurant.number_served)

restaurant.set_number_served(150)
print("Number of customers served:", restaurant.number_served)

restaurant.increment_number_served(50)
print("Number of customers served:", restaurant.number_served)

# 9.5 Login Attempts

class User:
    def __init__(self, first_name, last_name, username, location):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.location = location
        self.login_attempts = 0

    def describe_user(self):
        print("User Information:")
        print(f"Name: {self.first_name} {self.last_name}")
        print(f"Username: {self.username}")
        print(f"Location: {self.location}")

    def greet_user(self):
        print(f"Hello, {self.first_name}. Welcome back.")

    def increment_login_attempts(self):
        self.login_attempts += 1

    def reset_login_attempts(self):
        self.login_attempts = 0


user = User("John", "Doe", "johndoe", "New York")

user.increment_login_attempts()
user.increment_login_attempts()
user.increment_login_attempts()

print("Login Attempts:", user.login_attempts)

user.reset_login_attempts()

print("Login Attempts after reset:", user.login_attempts)

# 9.6 Ice Cream Stand

class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now open")


class IceCreamStand(Restaurant):
    def __init__(self, restaurant_name, cuisine_type, flavors):
        super().__init__(restaurant_name, cuisine_type)
        self.flavors = flavors

    def display_flavors(self):
        print("Available Ice Cream Flavors:")
        for flavor in self.flavors:
            print(flavor)


ice_cream_stand = IceCreamStand("Iced Flavor", "Ice Cream", ["Vanilla", "Chocolate", "Strawberry", "Vanila"])

ice_cream_stand.display_flavors()

# 9.7 Admin

class User:
    def __init__(self, first_name, last_name, username, location):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.location = location

    def describe_user(self):
        print("User Information:")
        print(f"Name: {self.first_name} {self.last_name}")
        print(f"Username: {self.username}")
        print(f"Location: {self.location}")

    def greet_user(self):
        print(f"Hello, {self.first_name}. Welcome.")


class Admin(User):
    def __init__(self, first_name, last_name, username, location, privileges):
        super().__init__(first_name, last_name, username, location)
        self.privileges = privileges

    def show_privileges(self):
        print("Administrator Privileges:")
        for privilege in self.privileges:
            print(privilege)


admin_privileges = [
    "can add post",
    "can delete post",
    "can ban user",
]

admin_user = Admin("Admin", "User", "admin", "Headquarters", admin_privileges)

admin_user.show_privileges()

# 9.8 Privileges

class Privileges:
    def __init__(self, privileges):
        self.privileges = privileges

    def show_privileges(self):
        print("Administrator Privileges:")
        for privilege in self.privileges:
            print(privilege)


class Admin:
    def __init__(self, first_name, last_name, username, location, privileges):
        self.first_name = first_name
        self.last_name = last_name
        self.username = username
        self.location = location
        self.privileges = Privileges(privileges)


admin_privileges = [
    "can add post",
    "can delete post",
    "can ban user",
]

admin_user = Admin("Admin", "User", "admin", "Headquarters", admin_privileges)

admin_user.privileges.show_privileges()

# 9.9 Battery Upgrade (1st EXERCISE SKIPPED)

# 9.10 Imported Restaurant

# 9.11 Imported Admin

# 9.12 Multiple Modules
        
# 9.13 Dice

import random

class Die:
    def __init__(self, sides=6):
        self.sides = sides

    def roll_die(self):
        print(f"Rolling a {self.sides}-sided die:")
        for _ in range(10):
            print(random.randint(1, self.sides))


six_sided_die = Die()
print("Rolling a 6-sided die 10 times:")
six_sided_die.roll_die()
print()

ten_sided_die = Die(sides=10)
print("Rolling a 10-sided die 10 times:")
ten_sided_die.roll_die()
print()

twenty_sided_die = Die(sides=20)
print("Rolling a 20-sided die 10 times:")
twenty_sided_die.roll_die()

# 9.14 Lottery

import random

numbers_and_letters = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'A', 'B', 'C', 'D', 'E']

winning_combination = random.sample(numbers_and_letters, 4)

print("Winning combination:", winning_combination)
print("Any ticket matching these 4 numbers or letters wins a prize.")

# 9.15 Lottery Analysis

import random

winning_combination = [1, 2, 3, 4]

my_ticket = [5, 6, 7, 8]

draw_count = 0

while True:
    draw_count += 1

    current_draw = random.sample(range(1, 11), 4)

    if current_draw == my_ticket:
        print("You won the lottery!")
        break

print(f"The loop had to run {draw_count} times.")

# 10.1 Learning Python

print("Reading the entire file:")
with open('learning_python.txt', 'r') as file:
    contents = file.read()
    print(contents)

# 10.2 Learning C

with open('learning_python.txt', 'r') as file:
    content = file.read()

modified_content = content.replace('Python', 'C')

print(modified_content)

# 10.3 Simpler Code

filename = 'learning_python.txt'

with open(filename) as file_object:
    for line in file_object.read().splitlines():
        print(line)

# 10.4 Guest

name = input("Please enter your name: ")

filename = 'guest.txt'
with open(filename, 'w') as file_object:
    file_object.write(name)


# 10.5 Guest Book
    
filename = 'guest_book.txt'

print("Enter 'quit' when you're done.")

with open(filename, 'a') as file_object:
    while True:
        name = input("Please enter your name: ")
        if name.lower() == 'quit':
            break
        file_object.write(name + '\n')

# 10.6 Addition
        
num1 = input("Enter the first number: ")

if num1.isdigit():
    num1 = int(num1)
else:
    print("Please enter a numerical value.")
    exit()

num2 = input("Enter the second number: ")

if num2.isdigit():
    num2 = int(num2)
else:
    print("Please enter a numerical value.")
    exit() 

result = num1 + num2

print("The sum of", num1, "and", num2, "is:", result)

# 10.7 Addition Calculator

while True:
    num1 = input("Enter the first number: ")
    if num1.isdigit():
        num1 = int(num1)
    else:
        print("Error: Please enter valid numerical values.")
        continue

    num2 = input("Enter the second number: ")
    if num2.isdigit():
        num2 = int(num2)
    else:
        print("Error: Please enter valid numerical values.")
        continue

    result = num1 + num2
    print("The sum of", num1, "and", num2, "is:", result)

    user_input = input("Do you want to continue? (yes/no): ")
    if user_input.lower() != 'yes':
        break

# 10.8 Cats and Dogs (2nd EXERCISE SKIPPED)

# 10.9 Silent Cats and Dogs (3rd EXERCISE SKIPPED)

# 10.10 Common Words (4th EXERCISE SKIPPED)

# 10.11 Favorite Number (5th EXERCISE SKIPPED)
        
# 10.12 Favorite Number Remembered (6th EXERCISE SKIPPED)
        
# 10.13 User Dictionary (7th EXERCISE SKIPPED)

# 10.14 Verify User (8th EXERCISE SKIPPED)

# 11.1 City, Country

# 11.2 Population

# 11.3 Employee

class Employee:
    def __init__(self, first_name, last_name, annual_salary):
        self.first_name = first_name
        self.last_name = last_name
        self.annual_salary = annual_salary

    def give_raise(self, raise_amount=5000):
        self.annual_salary += raise_amount
